apiVersion: v1
kind: Service
metadata:
  # Unique key of the service instance
  name: angular-webapp
spec:
  selector:
    # It defines which pods are going to be selected or considered
    # by this service
    # Select all the pods with value "webapp" for the label "app"
    app: webapp
    # We can directly point to the replica set and 
    # replicaset will hold the release specific containers
    # release: "0-5" 
   
  ports:
    - name: http
      port: 80 # This service is going to talk to port 80 of pods belonging to replica set
      nodePort: 30080 #node port has a constraint to be >30000
      
    # type: LoadBalancer for load balancer
    # type: ClusterIP # if the service is only internally accessible
  type: NodePort # this means we are going to expose the port through the node, to the external world

---

apiVersion: v1
kind: Service
metadata:
  # Unique key of the service instance
  name: fleetman-queue
spec:
  selector:
    # It defines which pods are going to be selected or considered
    # by this service
    # Select all the pods with value "queue" for the labe "queue"
    app: queue
  ports:
    - name: admin
      # This service is going to talk to port 8161 of queue which is 
      # basically the admin console of the Active MQ
      port: 8161  
      nodePort: 30010 #node port has a constraint to be >30000

    - name: endpoint
      # This service is going to talk to port 8161 of queue 
      # for sending messages
      port: 61616  
      # nodePort: 30010 #no need since this is an internal port 
      # for sending messages
      
    # type: LoadBalancer for load balancer
    # type: ClusterIP # if the service is only internally accessible
  type: NodePort # this means we are going to expose the port through the node, to the external world

---

apiVersion: v1
kind: Service
metadata:
  # Unique key of the service instance
  name: fleetman-position-tracker
spec:
  selector:
    # It defines which pods are going to be selected or considered
    # by this service
    # Select all the pods with value "webapp" for the labe "mylabelname"
    app: position-tracker
  ports:
    - name: admin
      # This service is going to talk to port 8161 of queue which is 
      # basically the admin console of the Active MQ
      port: 8080  

    # type: LoadBalancer for load balancer
    # type: ClusterIP # if the service is only internally accessible
  type: ClusterIP # this means we are going to expose the port through the node, to the external world

---

apiVersion: v1
kind: Service
metadata:
  # Unique key of the service instance
  name: fleetman-api-gateway
spec:
  selector:
    # It defines which pods are going to be selected or considered
    # by this service
    # Select all the pods with value "webapp" for the labe "mylabelname"
    app: api-gateway
  ports:
    - name: admin
      # This service is going to talk to port 8161 of queue which is 
      # basically the admin console of the Active MQ
      port: 8080  
      nodePort: 30020

    # type: LoadBalancer for load balancer
    # type: ClusterIP # if the service is only internally accessible
  type: NodePort # this means we are going to expose the port through the node, to the external world